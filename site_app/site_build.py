import requests
import json
import urllib3
import time

# Suppresses Insecure request warnings generated by requests module
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

auth_details = {"username": "stevehi", "password": "C1sco12345", 
                    "hostname": "10.86.85.168"}

file_contents = open("location_details_3_site.json").read()
site_details = json.loads(file_contents)


class Site:

    authUrl = "http://127.0.0.1:31112/function/dnac-auth"
    createSiteUrl = "http://127.0.0.1:31112/function/dnac-site-build"
    validateUrl = "http://127.0.0.1:31112/function/validate-build-step"

    def __init__(self, auth, site_data):
        self.auth = auth
        self.site_data = site_data

    def create_payload(self, site_type, floor):
        payload = {
                "type": site_type,
                "site": {
                  "area": {
                    "name": self.site_data["city"],
                    "parentName": "Global"
                    },
                  "building": {
                    "name": self.site_data["bldg"],
                    "address": self.site_data["address"],
                    "latitude": self.site_data["latitude"],
                    "longitude": self.site_data["longitude"]
                    },
                  "floor": {
                    "name": "Floor " + str(floor),
                    "parentName": self.site_data["bldg"],
                    "rfModel": "Cubes and Walled Offices",
                    "width": self.site_data["width"],
                    "length": self.site_data["length"],
                    "height": self.site_data["heigth"]
                    }
                  }
                }
        
        return payload

    def dnac_auth(self):

        userpass = json.dumps({"username": self.auth["username"], 
                               "password": self.auth["password"], 
                               "hostname": self.auth["hostname"]})
        
        headers = {'Content-Type': 'application/json'}

        token = requests.request("POST", self.authUrl, data=userpass, 
                                    headers=headers, verify=False)
        
        return token.json()

    def build(self, build_payload):
        
        headers = {'Content-Type': 'application/json'}
        
        build_status = requests.request("POST", self.createSiteUrl, 
                                        data=json.dumps(build_payload), 
                                        headers=headers, verify=False)
        
        return build_status

    def validate(self, validation):

        headers = {'Content-Type': 'application/json'}

        validate = requests.request("POST", self.validateUrl, 
                                    data=json.dumps(validation), 
                                    headers=headers, verify=False)
        
        return validate
    

for location in site_details["locations"]:

    site = Site(auth_details, location)

    token = site.dnac_auth()
    
    type_enum = ["area", "building", "floor"]
    
    for loc_type in type_enum:

        if loc_type != "floor":
            new_payload = site.create_payload(loc_type, location["floors"][0])
            # print(new_payload)

            build_package = {}
            build_package = site.dnac_auth()
            build_package["payload"] = new_payload
            build_package["hostname"] = auth_details["hostname"]

            # print(build_package)

            new_area = site.build(build_package)
            # print("new area created -------------------------------")
            # print(new_area.text)
            
            create_status = "unkown"
            
            
            while create_status != "SUCCESS":

                status_package = {}
                status_package = site.dnac_auth()
                # print("token data in status section +++++++++++++++++++++")
                # print(token)
                status_package["status_payload"] = json.loads(new_area.text)
                status_package["hostname"] = auth_details["hostname"]
                # print(status_package)
                    
                # print("Status Package *************************************")
                # print(status_package)
                    
                status = site.validate(status_package)
                # print(status.text)
                status_payload = json.loads(status.text)
                create_status = status_payload["status"]
                if create_status == "FAILURE":
                    print("SITE OBJECT ALREADY EXISTS")
                    break
                print(status_payload["status"])
                time.sleep(1)
                

        else:

            totalFloors = len(location["floors"])
            i = 0
            
            while i <= totalFloors - 1:

                new_payload = site.create_payload(loc_type, location["floors"][i])

                build_package = {}
                build_package = token
                build_package["payload"] = new_payload
                build_package["hostname"] = auth_details["hostname"]

                # print(build_package)

                new_area = site.build(build_package)
                # print(new_area.text)
                
                create_status = "unkown"

                while create_status != "SUCCESS":

                    status_package = {}
                    status_package = site.dnac_auth()
                    # print("token data in status section +++++++++++++++++++++")
                    # print(token)
                    status_package["status_payload"] = json.loads(new_area.text)
                    status_package["hostname"] = auth_details["hostname"]
                    # print(status_package)
                            
                    # print("Status Package *************************************")
                    # print(status_package)
                            
                    status = site.validate(status_package)
                    # print(status.text)
                    status_payload = json.loads(status.text)
                    create_status = status_payload["status"]
                    if create_status == "FAILURE":
                        print("SITE OBJECT ALREADY EXISTS")
                        break
                    print(status_payload["status"])
                    time.sleep(1)
                    
                
                i = i + 1
