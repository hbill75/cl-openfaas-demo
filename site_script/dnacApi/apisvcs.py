import requests
import urllib3
import base64
import json

# Suppresses Insecure request warnings generated by requests module
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def auth_token(userName, passWord, dnac_hostname):

    authString = userName + ":" + passWord
    
    base64AuthString = base64.b64encode(authString.encode())
    
    payload = ""
    
    headers = {
        "Authorization": "Basic " + base64AuthString.decode("UTF-8")
          }

    url = "https://{}/dna/system/api/v1/auth/token".format(dnac_hostname)

    authToken = requests.request("POST", url, data=payload, 
                                  headers=headers, verify=False)
    
    return json.loads(authToken.text)


def site_build(site_type, area_name, bldg_name, address, floorNum, loc_latitude, 
                loc_longitude, floor_width,floor_length,floor_height,dnac_hostname, auth):

    payload = {
                "type": site_type,
                "site": {
                  "area": {
                    "name": area_name,
                    "parentName": "Global"
                    },
                  "building": {
                    "name": bldg_name,
                    "address": address,
                    "latitude": loc_latitude,
                    "longitude": loc_longitude
                    },
                  "floor": {
                    "name": "Floor " + floorNum,
                    "parentName": bldg_name,
                    "rfModel": "Cubes and Walled Offices",
                    "width": floor_width,
                    "length": floor_length,
                    "height": floor_height
                    }
                  }
              }

    url = "https://{}/dna/intent/api/v1/site?__runsync=true".format(dnac_hostname)
    headers = {
        "Content-Type": "application/json",
        "x-auth-token": auth
        }

    site = requests.request("POST", url, data=json.dumps(payload), 
                              headers=headers, verify=False)
    # print(site.text)
    return site

def validate_build_step(status_url, dnac_hostname, auth):
    url =  "https://{}{}".format(dnac_hostname,status_url)
    payload = ""
    headers = {
        "Content-Type": "application/json",
        "x-auth-token": auth
        }

    step_success = requests.request("GET", url, data=json.dumps(payload), 
                                      headers=headers, verify=False)
    # print(step_success.text)
    return step_success
